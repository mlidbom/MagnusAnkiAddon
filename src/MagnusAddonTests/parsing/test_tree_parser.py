import pytest
from parsing.tree_parsing import tree_parser
from parsing.tree_parsing.tree_parse_result import TreeParseResult
from parsing.tree_parsing.tree_parser_node import TreeParserNode

N = TreeParserNode
R = TreeParseResult
def only_string_params(param) -> str: return param if isinstance(param, str) else ""

@pytest.mark.parametrize('sentence, excluded, expected', [
    ("知らない", set(), R(N('', '知らない', [N('知ら', '知る'), N('', 'ない')]))),
    ("いつまでも来ないと知らないからね", {"ないと"}, R(N('', 'いつまでも', [N('', 'いつまで', [N('', 'いつ'), N('', 'まで')]), N('', 'も')]), N('', '来ないと', [N('来', '来る'), N('', 'ない'), N('', 'と')]), N('', '知らない', [N('知ら', '知る'), N('', 'ない')]), N('', 'から'), N('', 'ね'))),
    ("ついに素晴らしい女性に逢えた。", set(), R(N('', 'ついに'), N('', '素晴らしい'), N('', '女性に', [N('', '女性'), N('', 'に')]), N('', '逢えた', [N('逢え', '逢える'), N('', 'た')]))),
    ("ついに素晴らしい女性に逢えた。", {"逢える", "えた"}, R(N('', 'ついに'), N('', '素晴らしい'), N('', '女性に', [N('', '女性'), N('', 'に')]), N('', '逢'), N('', 'え'), N('', 'た'))),
    ("ううん藤宮さんは日記を捨てるような人じゃない", set(), R(N('', 'ううん'), N('', '藤宮'), N('', 'さん'), N('', 'は'), N('', '日記を', [N('', '日記'), N('', 'を')]), N('', '捨てる'), N('ような', 'ようだ', [N('', 'よう'), N('な', 'だ')]), N('', '人じゃない', [N('', '人'), N('', 'じゃない', [N('', 'じゃ'), N('', 'ない')])]))),
    ("なかったかな", {"たか", "たかな"}, R(N('', 'なかった', [N('なかっ', 'ない'), N('', 'た')]), N('', 'かな', [N('', 'か'), N('', 'な')]))),
    ("探しているんですか", {"探しているんです"}, R(N('', '探している', [N('探し', '探す'), N('', 'て'), N('', 'いる')]), N('', 'んです', [N('', 'ん'), N('', 'です')]), N('', 'か'))),
    ("としたら", {"とする"}, R(N('としたら', 'とした', [N('', 'と'), N('したら', 'した', [N('し', 'する'), N('たら', 'た')])]))),
    ("離れていくよ", {"いくよ"}, R(N('', '離れていくよ', [N('離れ', '離れる'), N('', 'て'), N('', 'いく'), N('', 'よ')]))),
    ("いつまでも来ないと知らないからね", set(), R(N('', 'いつまでも', [N('', 'いつまで', [N('', 'いつ'), N('', 'まで')]), N('', 'も')]), N('', '来ないと', [N('来', '来る'), N('', 'ないと', [N('', 'ない'), N('', 'と')])]), N('', '知らない', [N('知ら', '知る'), N('', 'ない')]), N('', 'から'), N('', 'ね'))),
    ("ダメダメ私を殺して", {"殺し"}, R(N('', 'ダメダメ'), N('', '私を', [N('', '私'), N('', 'を')]), N('', '殺して', [N('殺し', '殺す'), N('', 'て')]))),
    ("夢を見た", set(), R(N('', '夢を見た', [N('夢を見', '夢を見る', [N('', '夢'), N('', 'を'), N('見', '見る')]), N('', 'た')]))),
    ("言われるまで気づかなかった", set(), R(N('', '言われるまで', [N('言わ', '言う'), N('', 'れる'), N('', 'まで')]), N('', '気づかなかった', [N('気づか', '気づく'), N('なかっ', 'ない'), N('', 'た')]))),
    ("行きたい所全部行こう", set(), R(N('', '行きたい', [N('行き', '行く'), N('', 'たい')]), N('', '所'), N('', '全部'), N('', '行こう', [N('行こ', '行く'), N('', 'う')]))),
    ("当てられても", set(), R(N('', '当てられても', [N('当てられ', '当てられる', [N('当て', '当てる'), N('られ', 'られる')]), N('', 'ても', [N('', 'て'), N('', 'も')])]))),
    ("食べてもいいけど", set(), R(N('', '食べてもいいけど', [N('食べ', '食べる'), N('', 'てもいいけど', [N('', 'てもいい', [N('', 'ても', [N('', 'て'), N('', 'も')]), N('', 'いい')]), N('', 'けど')])]))),
    ("逃げたり", set(), R(N('', '逃げたり', [N('逃げ', '逃げる'), N('', 'たり')]))),
    ("いるのにキス", {"いるのに"}, R(N('', 'いる'), N('', 'のに', [N('', 'の'), N('', 'に')]), N('', 'キス'))),
    ("するためでした", set(), R(N('', 'する'), N('', 'ため'), N('でし', 'です'), N('', 'た'))),
    ("ように言ったのも", {"ように言ったのも", "ように言ったの", "たのも", "たの"}, R(N('', 'ように言った', [N('ように言っ', 'ように言う', [N('', 'ように', [N('', 'よう'), N('', 'に')]), N('言っ', '言う')]), N('', 'た')]), N('', 'の'), N('', 'も'))),
    ("探しているんですか", {"探しているんです"}, R(N('', '探している', [N('探し', '探す'), N('', 'て'), N('', 'いる')]), N('', 'んです', [N('', 'ん'), N('', 'です')]), N('', 'か'))),
    ("一度聞いたことがある", set(), R(N('', '一度'), N('', '聞いたことがある', [N('聞い', '聞く'), N('', 'た'), N('', 'ことがある', [N('', 'こと'), N('', 'が'), N('', 'ある')])]))),
    ("よかった", set(), R(N('', 'よかった', [N('よかっ', 'よい'), N('', 'た')]))),
    ("聞かなかったことにしてあげる", set(), R(N('', '聞かなかったことにしてあげる', [N('聞か', '聞く'), N('なかったことにし', 'なかったことにする', [N('なかっ', 'ない'), N('', 'た'), N('ことにし', 'ことにする', [N('', 'ことに', [N('', 'こと'), N('', 'に')]), N('し', 'する')])]), N('', 'て'), N('', 'あげる')]))),
    ("明るいしもう", {"しもう", "しも"}, R(N('明るいし', '明るいする', [N('', '明るい'), N('し', 'する')]), N('', 'もう', [N('', 'も'), N('', 'う')]))),
    ("今じゃ町は夜でも明るいしもう会うこともないかもな", {"しもう"}, R(N('', '今じゃ', [N('', '今'), N('', 'じゃ')]), N('', '町は', [N('', '町'), N('', 'は')]), N('', '夜でも', [N('', '夜'), N('', 'でも')]), N('', '明るいし', [N('', '明るい'), N('', 'し')]), N('', 'もう'),
                                                                       N('', '会うこともないかも', [N('', '会う'), N('', 'こと'), N('', 'も'), N('', 'ない'), N('', 'かも')]), N('', 'な'))),
    ("友達だから余計に気になっちゃうんだよ", set(), R(N('', '友達だから', [N('', '友達'), N('', 'だから', [N('', 'だ'), N('', 'から')])]), N('', '余計に', [N('', '余計'), N('', 'に')]),
                                                      N('', '気になっちゃうんだよ', [N('気になっ', '気になる', [N('', '気'), N('', 'に'), N('なっ', 'なる')]), N('', 'ちゃう'), N('', 'んだ', [N('', 'ん'), N('', 'だ')]), N('', 'よ')])))
], ids=only_string_params)
def test_various_stuff(sentence: str, excluded: set[str], expected: TreeParseResult) -> None: run_tests(excluded, expected, sentence)



@pytest.mark.parametrize('sentence, excluded, expected', [
    # various conjugations
    ("よかった", set(), R(N('', 'よかった', [N('よかっ', 'よい'), N('', 'た')]))),
    ("良かった", set(), R(N('', '良かった', [N('よかっ', '良い'), N('', 'た')]))),
    ("良くない", set(), R(N('', '良くない', [N('良く', '良い'), N('', 'ない')]))),
    ("良ければ", set(), R(N('', '良ければ', [N('良けれ', '良い'), N('', 'ば')]))),
    ("良かったら", set(), R(N('良かったら', '良かった', [N('良かっ', '良い'), N('たら', 'た')]))),
    ("よかったじゃん", {"よかったじゃん"}, R(N('', 'よかった', [N('よかっ', 'よい'), N('', 'た')]), N('', 'じゃん'))),

    # adjective within verb compound
    ("言えばよかった", set(), R(N('', '言えば', [N('言え', '言う'), N('', 'ば')]), N('', 'よかった', [N('よかっ', 'よい'), N('', 'た')])))
], ids=only_string_params)
def test_adjective_compounds(sentence: str, excluded: set[str], expected: TreeParseResult) -> None: run_tests(excluded, expected, sentence)


@pytest.mark.parametrize('sentence, excluded, expected', [
    ("あいつが話の中に出てくるのが", set(), R(N('', 'あいつが', [N('', 'あいつ'), N('', 'が')]), N('', '話の中に', [N('', '話'), N('', 'の'), N('', '中'), N('', 'に')]),
                                              N('', '出てくるのが', [N('', '出てくるの', [N('', '出てくる', [N('出', '出る'), N('', 'て'), N('', 'くる')]), N('', 'の')]), N('', 'が')]))),
    ("自分のことを知ってもらえてない人に", set(), R(N('', '自分のことを', [N('', '自分'), N('', 'の'), N('', 'こと'), N('', 'を')]), N('', '知ってもらえてない人に', [N('', '知ってもらえてない人', [N('知っ', '知る'), N('', 'て'), N('もらえ', 'もらう'), N('て', 'てる'), N('', 'ない'), N('', '人')]), N('', 'に')])))
], ids=only_string_params)
def test_noun_compounds(sentence: str, excluded: set[str], expected: TreeParseResult) -> None: run_tests(excluded, expected, sentence)

@pytest.mark.parametrize('sentence, excluded, expected', [
    ("今じゃ町は夜でも明るいしもう会うこともないかもな", {"しもう"},R(N('', '今じゃ', [N('', '今'), N('', 'じゃ')]), N('', '町は', [N('', '町'), N('', 'は')]), N('', '夜でも', [N('', '夜'), N('', 'でも')]), N('', '明るいし', [N('', '明るい'), N('', 'し')]), N('', 'もう'),
                                                                      N('', '会うこともないかも', [N('', '会う'), N('', 'こと'), N('', 'も'), N('', 'ない'), N('', 'かも')]), N('', 'な'))),
], ids=only_string_params)
def test_temp(sentence: str, excluded: set[str], expected: TreeParseResult) -> None: run_tests(excluded, expected, sentence)


def run_tests(excluded, expected, sentence) -> None:
    print()
    result = tree_parser.parse_tree(sentence, excluded)
    print(result)
    assert result == expected