import pytest
from parsing.tree_parsing import tree_parser
from parsing.tree_parsing.treeparsernode import TreeParserNode

N = TreeParserNode


@pytest.mark.parametrize('sentence, excluded, expected', [
    ("知らない", set(), [N('知らない', '', [N('知る', '知ら'), N('ない', '')])]),
    ("いつまでも来ないと知らないからね", {"ないと"}, [N('いつまでも', '', [N('いつまで', '', [N('いつ', ''), N('まで', '')]), N('も', '')]), N('来ないと', '', [N('来る', '来'), N('ない', ''), N('と', '')]), N('知らない', '', [N('知る', '知ら'), N('ない', '')]), N('から', ''), N('ね', '')]),
    ("ついに素晴らしい女性に逢えた。", set(), [N('ついに', ''), N('素晴らしい', ''), N('女性に', '', [N('女性', ''), N('に', '')]), N('逢えた', '', [N('逢える', '逢え'), N('た', '')])]),
    ("ついに素晴らしい女性に逢えた。", {"逢える", "えた"}, [N('ついに', ''), N('素晴らしい', ''), N('女性に', '', [N('女性', ''), N('に', '')]), N('逢', ''), N('え', ''), N('た', '')]),
    ("ううん藤宮さんは日記を捨てるような人じゃない", set(), [N('ううん',''), N('藤宮',''), N('さん',''), N('は',''), N('日記を','',[N('日記',''), N('を','')]), N('捨てる',''), N('ようだ','ような',[N('よう',''), N('だ','な')]), N('人じゃない','',[N('人',''), N('じゃない','',[N('じゃ',''), N('ない','')])])]),
    ("なかったかな", {"たか", "たかな"}, [N('なかった', '', [N('ない', 'なかっ'), N('た', '')]), N('かな', '', [N('か', ''), N('な', '')])]),
    ("探しているんですか", {"探しているんです"}, [N('探している', '', [N('探す', '探し'), N('て', ''), N('いる', '')]), N('んです', '', [N('ん', ''), N('です', '')]), N('か', '')]),
    ("としたら", {"とする"}, [N('とした', 'としたら', [N('と', ''), N('した', 'したら', [N('する', 'し'), N('た', 'たら')])])]),
    ("離れていくよ", {"いくよ"}, [N('離れていくよ','',[N('離れる','離れ'), N('て',''), N('いく',''), N('よ','')])]),
    ("いつまでも来ないと知らないからね", set(), [N('いつまでも', '', [N('いつまで', '', [N('いつ', ''), N('まで', '')]), N('も', '')]), N('来ないと', '', [N('来る', '来'), N('ないと', '', [N('ない', ''), N('と', '')])]), N('知らない', '', [N('知る', '知ら'), N('ない', '')]), N('から', ''), N('ね', '')]),
    ("ダメダメ私を殺して", {"殺し"}, [N('ダメダメ', ''), N('私を', '', [N('私', ''), N('を', '')]), N('殺して', '', [N('殺す', '殺し'), N('て', '')])]),
    ("夢を見た", set(), [N('夢を見た', '', [N('夢を見る', '夢を見', [N('夢', ''), N('を', ''), N('見る', '見')]), N('た', '')])]),
    ("言われるまで気づかなかった", set(), [N('言われるまで', '', [N('言う', '言わ'), N('れる', ''), N('まで', '')]), N('気づかなかった', '', [N('気づく', '気づか'), N('ない', 'なかっ'), N('た', '')])]),
    ("行きたい所全部行こう", set(), [N('行きたい', '', [N('行く', '行き'), N('たい', '')]), N('所', ''), N('全部', ''), N('行こう', '', [N('行く', '行こ'), N('う', '')])]),
    ("当てられても", set(), [N('当てられても', '', [N('当てられる', '当てられ', [N('当てる', '当て'), N('られる', 'られ')]), N('ても', '', [N('て', ''), N('も', '')])])]),
    ("食べてもいいけど", set(), [N('食べてもいいけど','',[N('食べる','食べ'), N('てもいいけど','',[N('てもいい','',[N('ても','',[N('て',''), N('も','')]), N('いい','')]), N('けど','')])])]),
    ("逃げたり", set(), [N('逃げたり', '', [N('逃げる', '逃げ'), N('たり', '')])]),
    ("いるのにキス", {"いるのに"}, [N('いる', ''), N('のに', '', [N('の', ''), N('に', '')]), N('キス', '')]),
    ("するためでした", set(), [N('する', ''), N('ため', ''), N('です', 'でし'), N('た', '')]),
    ("ように言ったのも", {"ように言ったのも", "ように言ったの", "たのも", "たの"}, [N('ように言った', '', [N('ように言う', 'ように言っ', [N('ように', '', [N('よう', ''), N('に', '')]), N('言う', '言っ')]), N('た', '')]), N('の', ''), N('も', '')]),
    ("探しているんですか", {"探しているんです"}, [N('探している', '', [N('探す', '探し'), N('て', ''), N('いる', '')]), N('んです', '', [N('ん', ''), N('です', '')]), N('か', '')]),
    ("一度聞いたことがある", set(), [N('一度', ''), N('聞いたことがある', '', [N('聞く', '聞い'), N('た', ''), N('ことがある', '', [N('こと', ''), N('が', ''), N('ある', '')])])]),
    ("よかった", set(), [N('よかった', '', [N('よい', 'よかっ'), N('た', '')])]),
    ("聞かなかったことにしてあげる", set(), [N('聞かなかったことにしてあげる', '', [N('聞く', '聞か'), N('なかったことにする', 'なかったことにし', [N('ない', 'なかっ'), N('た', ''), N('ことにする', 'ことにし', [N('ことに', '', [N('こと', ''), N('に', '')]), N('する', 'し')])]), N('て', ''), N('あげる', '')])]),
    ("明るいしもう", {"しもう", "しも"}, [N('明るいする','明るいし',[N('明るい',''), N('する','し')]), N('もう','',[N('も',''), N('う','')])]),
    ("今じゃ町は夜でも明るいしもう会うこともないかもな", {"しもう"}, [N('今じゃ町は','',[N('今',''), N('じゃ',''), N('町',''), N('は','')]), N('夜でも明るいし','',[N('夜',''), N('でも',''), N('明るいし','',[N('明るい',''), N('し','')])]), N('もう',''), N('会うこともないかもな','',[N('会う',''), N('こと',''), N('も',''), N('ない',''), N('かも',''), N('な','')])])
])
def test_various_stuff(sentence: str, excluded: set[str], expected: list[TreeParserNode]) -> None:
    result = tree_parser.parse_tree(sentence, excluded)
    assert result == expected


@pytest.mark.parametrize('sentence, excluded, expected', [
    # various conjugations
    ("よかった", set(), [N('よかった', '', [N('よい', 'よかっ'), N('た', '')])]),
    ("良かった", set(), [N('良かった', '', [N('良い', 'よかっ'), N('た', '')])]),
    ("良くない", set(), [N('良くない', '', [N('良い', '良く'), N('ない', '')])]),
    ("良ければ", set(), [N('良ければ', '', [N('良い', '良けれ'), N('ば', '')])]),
    ("良かったら", set(), [N('良かった', '良かったら', [N('良い', '良かっ'), N('た', 'たら')])]),
    ("よかったじゃん", {"よかったじゃん"}, [N('よかった', '', [N('よい', 'よかっ'), N('た', '')]), N('じゃん', '')]),

    # adjective within verb compound
    ("言えばよかった", set(), [N('言えばよかった', '', [N('言う', '言え'), N('ば', ''), N('よかった', '', [N('よい', 'よかっ'), N('た', '')])])])
])
def test_adjective_compounds(sentence: str, excluded: set[str], expected: list[TreeParserNode]) -> None:
    result = tree_parser.parse_tree(sentence, excluded)
    assert result == expected


@pytest.mark.parametrize('sentence, excluded, expected', [
    ("あいつが話の中に出てくるのが", set(), [N('あいつが', '', [N('あいつ', ''), N('が', '')]), N('話の中に', '', [N('話', ''), N('の', ''), N('中', ''), N('に', '')]), N('出てくるの', '', [N('出てくる', '', [N('出る', '出'), N('て', ''), N('くる', '')]), N('の', '')]), N('が', '')]),
    ("自分のことを知ってもらえてない人に", set(), [N('自分のことを', '', [N('自分', ''), N('の', ''), N('こと', ''), N('を', '')]), N('知ってもらえてない人に', '', [N('知ってもらえてない人', '', [N('知る', '知っ'), N('て', ''), N('もらう', 'もらえ'), N('てる', 'て'), N('ない', ''), N('人', '')]), N('に', '')])])
])
def test_noun_compounds(sentence: str, excluded: set[str], expected: list[TreeParserNode]) -> None:
    result = tree_parser.parse_tree(sentence, excluded)
    assert result == expected


@pytest.mark.parametrize('sentence, excluded, expected', [
    #("気になっちゃうんだよ", set(), [N('気になる','気になっ',[N('気',''), N('に',''), N('なる','なっ')]), N('ちゃうんだよ','',[N('ちゃう',''), N('んだ','',[N('ん',''), N('だ','')]), N('よ','')])])
    ("いつまでも来ないと知らないからね", {"ないと"}, [N('いつまでも', '', [N('いつまで', '', [N('いつ', ''), N('まで', '')]), N('も', '')]), N('来ないと', '', [N('来る', '来'), N('ない', ''), N('と', '')]), N('知らない', '', [N('知る', '知ら'), N('ない', '')]), N('から', ''), N('ね', '')]),
])
def test_temp(sentence: str, excluded: set[str], expected: list[TreeParserNode]) -> None:
    result = tree_parser.parse_tree(sentence, excluded)
    assert result == expected
